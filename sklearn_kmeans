# -*- coding: utf-8 -*-
"""
Created on Mon Dec  3 19:08:35 2018

@author: xhlgogo
"""
import os
import matplotlib.pyplot as plt
from pyecharts import Scatter
# =============================================================================
# import nltk
# =============================================================================
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE
from sklearn.feature_extraction.text import TfidfTransformer  
from sklearn.feature_extraction.text import CountVectorizer


read_path = "E:/Program Files/workspace/report_sheng/report_cut_txt/"
file_list = file_list = os.listdir(read_path)

corpus = []
for file_name in file_list:
    with open(read_path+file_name, 'r') as file:
        corpus.append(file.readline())

 #将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频
vectorizer = CountVectorizer()
 
#该类会统计每个词语的tf-idf权值
transformer = TfidfTransformer()


#第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵
#参数为list,每个元素为一个字符串，该字符串为文档的分词结果以空格分开
tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))

#获取词袋模型中的所有词语  
word = vectorizer.get_feature_names()

#将tf-idf矩阵抽取出来，元素w[i][j]表示j词在i类文本中的tf-idf权重
weight = tfidf.toarray()


print('Start Kmeans:')
clf = KMeans(n_clusters=31)
s = clf.fit(weight)

#31个中心点
print(clf.cluster_centers_)

#用来评估簇的个数是否合适，距离越小说明簇分的越好，选取临界点的簇个数
print(clf.inertia_)

print("T-SNE start")
# 使用T-SNE算法，对权重进行降维，准确度比PCA算法高，但是耗时长
tsne = TSNE(n_components=2)
decomposition_data = tsne.fit_transform(weight)

x = []
y = []
for i in decomposition_data:
    x.append(i[0])
    y.append(i[1])

scatter = Scatter(title="k-means聚类",title_top='bottom',title_pos='center')
for i in range(len(x)):
    scatter.add(str(clf.labels_[i]),[x[i]],[y[i]],symbol_size=5,is_datazoom_show=True)
scatter.render("k-means聚类.html")



fig = plt.figure(figsize=(40, 40))
ax = plt.axes()
plt.scatter(x, y, c=clf.labels_, marker="x")
plt.xticks(())
plt.yticks(())
# plt.show()
plt.savefig('KMeans.png', aspect=1)




















# =============================================================================
# forder_list = ["北京市","天津市","上海市","河北省","山西省","辽宁省","吉林省","重庆市"
#                       ,"黑龙江","江苏省","浙江省","安徽省","福建省","江西省","山东省","河南省"
#                       ,"湖北省","湖南省","广东省","海南省","四川省","贵州省","云南省","陕西省"
#                       ,"甘肃省","青海省","内蒙古","广西省","西藏省","宁夏省","新疆省"]
# 
# forder_li = ["北京市","天津市","上海市","河北省","山西省","辽宁省","吉林省","重庆市"
#                       ,"黑龙江省","江苏省","浙江省","安徽省","福建省","江西省","山东省","河南省"
#                       ,"湖北省","湖南省","广东省","海南省","四川省","贵州省","云南省","陕西省"
#                       ,"甘肃省","青海省","内蒙古自治区","广西壮族自治区","西藏自治区",
#                       "宁夏回族自治区","新疆维吾尔自治区"]
# 
# =============================================================================

